@page "/counter"
@inject ServicioSingleton singleton
@inject ServicioTransient transient
@inject IRepositorioPeliculas repositorioPeliculas
@inject IJSRuntime Js

<h1>Counter</h1>
<button @onclick="HazmeClick">Click !</button>
<button @onclick="HazmeClickJavaScript">Click JavaScript!</button>
<div>Contador : @Contador</div>
<div>Singleton : @singleton.Valor</div>
<div>Trasient : @transient.Valor</div>

<br>
<input type="text" placeholder="Inserte una nombre de Pelicula" @bind="NombrePelicula" />
<button @onclick="InsertaNuevaPelicula">Agregar</button>
<br>

<ListarPeliculas Titulo="Peliculas Ramdom" Peliculas="Peliculas"></ListarPeliculas>

<br />

@code
{
    public List<Pelicula> Peliculas { set; get; }
    public string NombrePelicula { set; get; }

    private int Contador { set; get; }
    static int ContadorJs = 0;

    IJSObjectReference moduloJs;

    private void InsertaNuevaPelicula()
    {
        Pelicula peliculaNueva = new Pelicula()
        {
            Titulo = NombrePelicula,
            FechaLanzamiento = DateTime.Today
        };

        Peliculas.Add(peliculaNueva);
    }

    [JSInvokable]
    public async Task HazmeClick()
    {
        moduloJs = await Js.InvokeAsync<IJSObjectReference>("import","./js/Counter.js");
        await moduloJs.InvokeVoidAsync("AlertaMensaje", "Hola desde C#");

        Contador++;
        singleton.Valor = Contador;
        transient.Valor = Contador;
        ContadorJs++;
        await Js.InvokeVoidAsync("pruebaPuntoNetStatic");
    }

    [JSInvokable]
    public async Task HazmeClickJavaScript()
    {
        await Js.InvokeVoidAsync("pruebaPuntoNetInstancia", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public static Task<int> ObtenerCurrentCount()
    {
        return Task.FromResult(ContadorJs);
    }

    protected override void OnInitialized()
    {
        Peliculas = repositorioPeliculas.ObtenerPeliculas();
        Console.WriteLine($"Total de peliculas al Iniciar : {Peliculas.Count} Peliculas");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"OnAfterRender Por primera vez : { firstRender }");
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }
}